#!/usr/bin/env zsh

# @param $1 Configuration file path.
function validate_main_configuration_file_path {
  if ! [[ -f "$(get_configuration_file_path 'main')" ]]; then
    return 1
  fi
}

# @param $1 Configuration file: 'main', 'local'.
function get_configuration_file_path {
  case "$1" in
    'main')  local config_file=$(eval echo "$ZT_CONFIG_HOME/config.csv");;
    'local') local config_file=$(eval echo "$ZT_CONFIG_HOME/config_local.csv");;
  esac
  echo "$config_file"
}

# @return string Main directories as-are, no transformations applied to contents.
#         It is required to have this file.
function get_raw_directories_main {
  cat $(get_configuration_file_path 'main')
}

# @return string Local directories as-are, no transformations applied to contents.
#         It is not required to have this file.
function get_raw_directories_local {
  cat $(get_configuration_file_path 'local') 2> /dev/null
}

# @return string All directories as-are, no transformations applied to the files.
#         (the public directories are listed first, then the private ones).
function get_raw_directories_all {
  get_raw_directories_main && get_raw_directories_local
}

# @return string Function name which when invoked returns a list of raw directories.
function get_raw_directories_function {
  local list_local=$ZT_LIST_DIRECTORIES_LOCAL
  local raw_directories_function='get_raw_directories_main'
  if [[ $list_local -eq 1 ]]; then
    local raw_directories_function='get_raw_directories_all'
  fi
  echo "$raw_directories_function"
}

# @stdin Prettified lines of lines from the directories config file.
# @param $1 Name of field to retrieve: `path` or `description`.
# @return string The trimmed value of the field.
function get_path_from_pretty {
  gawk -i trampoline.gawk '{
    split($0, fields_array, /\-\-/)
    path = zt::trim(fields_array[1])
    sub(ENVIRON["ZT_DIRECTORY_DECORATOR"], "", path)
    print(path)
  }'
}

# Pretty print the provided lines of raw lines from the directories config file.
#
# @stdin Raw lines from the directories config file.
# @return string Pretty-printed directories.
function pretty_print {
  local stdin="$(cat -)"
  local longest_path_length="$(echo "$stdin" \
      | gawk -F, '{ print(length($1)) }' \
      | sort -rn \
      | head -1)"
  echo "$stdin" | gawk -i trampoline.gawk \
      -v longest_path_length=$longest_path_length -v expand=$1 '{
          zt::pretty_print($0, longest_path_length, expand) }'
}

eval "$@"
