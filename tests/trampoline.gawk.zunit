#!/usr/bin/env zunit

# Setup directory structure created:
#
# $HOME/$uuid
# ├── dir1
# │   ├── dir1
# │   └── dir2
# ├── dir2
# │   └── file.txt
# └── dir3
#     ├── dir
#     └── file.txt
@setup {
  load './_support/uuid.zsh'
  mkdir -p  $HOME/$uuid/dir1/dir{1..2}
  mkdir -p "$HOME/$uuid/dir2" && touch "$HOME/$uuid/dir2/file.txt"
  mkdir -p "$HOME/$uuid/dir3/dir" && touch "$HOME/$uuid/dir3/file.txt"
  export ZT_DIRECTORY_DECORATOR='*'
  load '../src/configuration.zsh'
}

@teardown {
  rmdir $HOME/$uuid/dir1/dir{1..2}
  rmdir $HOME/$uuid/dir1
  rm    $HOME/$uuid/dir2/file.txt
  rmdir $HOME/$uuid/dir2
  rm    $HOME/$uuid/dir3/file.txt
  rmdir $HOME/$uuid/dir3/dir
  rmdir $HOME/$uuid/dir3
  rmdir $HOME/$uuid
}

@test 'pretty_print lists directories without descriptions' {
  # setup
  local dirs_raw="\
    ~/$uuid/dir1
    ~/$uuid/dir2
    ~/$uuid/dir3"
  # exercise
  run gawk -i trampoline.gawk '{
      printf zt::pretty_print($0, 43, "true") }' <<< "$dirs_raw"
  # verify
  assert $state equals 0
  assert "$output" is_not_empty
  assert ${#lines[@]} equals 3
  assert "${lines[1]}" same_as "*~/$uuid/dir1"
  assert "${lines[2]}" same_as "*~/$uuid/dir2"
  assert "${lines[3]}" same_as "*~/$uuid/dir3"
}

@test 'pretty_print lists directories with descriptions' {
  # setup
  local dirs_raw="\
    ~/$uuid/dir1, Temp dir 1.
    ~/$uuid/dir2, Temp dir 2.
    ~/$uuid/dir3, Temp dir 3."
  # exercise
  run gawk -i trampoline.gawk '{
      printf zt::pretty_print($0, 43, "true") }' <<< "$dirs_raw"
  # verify
  assert $state equals 0
  assert "$output" is_not_empty
  assert ${#lines[@]} equals 3
  assert "${lines[1]}" same_as "*~/$uuid/dir1    -- Temp dir 1."
  assert "${lines[2]}" same_as "*~/$uuid/dir2    -- Temp dir 2."
  assert "${lines[3]}" same_as "*~/$uuid/dir3    -- Temp dir 3."
}

@test 'pretty_print lists directories with expand' {
  # setup
  local dirs_raw="\
    ~/$uuid/dir1,, true
    ~/$uuid/dir2,, true
    ~/$uuid/dir3,, true"
  # exercise
  run gawk -i trampoline.gawk '{
      printf zt::pretty_print($0, 43, "true") }' <<< "$dirs_raw"
  # verify
  assert $state equals 0
  assert "$output" is_not_empty
  assert ${#lines[@]} equals 6
  assert "${lines[1]}" same_as "*~/$uuid/dir1"
  assert "${lines[2]}" same_as " ~/$uuid/dir1/dir1"
  assert "${lines[3]}" same_as " ~/$uuid/dir1/dir2"
  assert "${lines[4]}" same_as "*~/$uuid/dir2"
  assert "${lines[5]}" same_as "*~/$uuid/dir3"
  assert "${lines[6]}" same_as " ~/$uuid/dir3/dir"
}

@test 'pretty_print lists directories with expand blocked' {
  # setup
  local dirs_raw="\
    ~/$uuid/dir1,, true
    ~/$uuid/dir2,, true
    ~/$uuid/dir3,, true"
  # exercise
  run gawk -i trampoline.gawk '{
      printf zt::pretty_print($0, 43, "false") }' <<< "$dirs_raw"
  # verify
  assert $state equals 0
  assert "$output" is_not_empty
  assert ${#lines[@]} equals 3
  assert "${lines[1]}" same_as "*~/$uuid/dir1"
  assert "${lines[2]}" same_as "*~/$uuid/dir2"
  assert "${lines[3]}" same_as "*~/$uuid/dir3"
}

@test 'pretty_print lists directories with descriptions and expand' {
  # setup
  local dirs_raw="\
    ~/$uuid/dir1, Test dir 1., true
    ~/$uuid/dir2, Test dir 2., true
    ~/$uuid/dir3, Test dir 3., true"
  # exercise
  run gawk -i trampoline.gawk '{
      printf zt::pretty_print($0, 43, "true") }' <<< "$dirs_raw"
  # verify
  assert $state equals 0
  assert "$output" is_not_empty
  assert ${#lines[@]} equals 6
  assert "${lines[1]}" same_as "*~/$uuid/dir1    -- Test dir 1."
  assert "${lines[2]}" same_as " ~/$uuid/dir1/dir1"
  assert "${lines[3]}" same_as " ~/$uuid/dir1/dir2"
  assert "${lines[4]}" same_as "*~/$uuid/dir2    -- Test dir 2."
  assert "${lines[5]}" same_as "*~/$uuid/dir3    -- Test dir 3."
  assert "${lines[6]}" same_as " ~/$uuid/dir3/dir"
}

@test 'trim removes leading and trailing whitespace' {
  # setup
  local string='  this  is some   text      '
  # exercise
  run gawk -i trampoline.gawk '{ printf zt::trim($0) }' <<< "$string"
  # verify
  assert $state equals 0
  assert "$output" same_as 'this  is some   text'
}
